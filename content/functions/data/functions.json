{
  "string-functions": [
    {
      "name": "escape",
      "example": "escape(@string);",
      "description": "URL encodes a string"
    },
    {
      "name": "e",
      "example": "e(@string);",
      "description": "escape string content"
    },
    {
      "name": "format",
      "example": "%(@string, values...);",
      "description": "formats a string"
    },
    {
      "name": "replace",
      "example": "replace(@string, @pattern, @replacement[, @flags]);",
      "description": "string replace"
    }
  ],
  "misc-functions": [
    {
      "name": "unit",
      "example": "unit(@dimension, [@unit: \"\"]);",
      "description": "remove or change the unit of a dimension"
    },
    {
      "name": "color",
      "example": "color(@string);",
      "description": "parses a string to a color"
    },
    {
      "name": "convert",
      "example": "convert(@value, unit);",
      "description": "converts numbers from one type into another"
    },
    {
      "name": "data-uri",
      "example": "data-uri([mimetype,] url);",
      "description": "inlines a resource and falls back to `url()`"
    }
  ],
  "list-functions": [
    {
      "name": "length",
      "example": "length(@list);",
      "description": "returns the number of elements in a value list",
      "version": "1.5.0"
    },
    {
      "name": "extract",
      "example": "extract(@list, index);",
      "description": "returns a value at the specified position in the list",
      "version": "1.4.0"
    }
  ],
  "math-functions": [
    {
      "name": "unit",
      "description": "changes number units without converting it",
      "example": "unit(number, units);",
      "version": "1.4.0"
    },
    {
      "name": "convert",
      "description": "converts between number types",
      "example": "convert(number, units);",
      "version": "1.4.0"
    },
    {
      "name": "abs",
      "description": "absolute value of a number",
      "example": "abs(number);",
      "version": "1.4.0"
    },
    {
      "name": "acos",
      "description": "arccosine - inverse of cosine function",
      "example": "acos(number);",
      "version": "1.4.0"
    },
    {
      "name": "asin",
      "description": "arcsine - inverse of sine function",
      "example": "asin(number);",
      "version": "1.4.0"
    },
    {
      "name": "ceil",
      "example": "ceil(@number);",
      "description": "rounds up to an integer"
    },
    {
      "name": "cos",
      "description": "cosine function",
      "example": "cos(number);",
      "version": "1.4.0"
    },
    {
      "name": "floor",
      "description": "rounds down to an integer",
      "example": "floor(@number);"
    },
    {
      "name": "percentage",
      "description": "converts to a %, e.g. 0.5 > 50%",
      "example": "percentage(@number);"
    },
    {
      "name": "round",
      "description": "rounds a number to a number of places",
      "example": "round(number, [places: 0]);"
    },
    {
      "name": "sqrt",
      "description": "calculates square root of a number",
      "example": "sqrt(number);",
      "version": "1.4.0"
    },
    {
      "name": "sin",
      "description": "sine function",
      "example": "sin(number);",
      "version": "1.4.0"
    },
    {
      "name": "tan",
      "description": "tangent function",
      "example": "tan(number);",
      "version": "1.4.0"
    },
    {
      "name": "atan",
      "description": "arctangent - inverse of tangent function",
      "example": "atan(number);",
      "version": "1.4.0"
    },
    {
      "name": "pi",
      "description": "returns pi",
      "example": "pi();",
      "version": "1.4.0"
    },
    {
      "name": "pow",
      "description": "first argument raised to the power of the second argument",
      "example": "pow(@base, @exponent);",
      "version": "1.4.0"
    },
    {
      "name": "mod",
      "description": "first argument modulus second argument",
      "example": "mod(number, number);",
      "version": "1.4.0"
    },
    {
      "name": "min",
      "description": "returns the lowest of one or more values",
      "example": "min(@x, @y);",
      "version": "1.5.0"
    },
    {
      "name": "max",
      "description": "returns the lowest of one or more values",
      "example": "max(@x, @y);",
      "version": "1.5.0"
    }
  ],
  "color-definition": [
    {
      "name": "rgb",
      "example": "rgb(@r, @g, @b);",
      "description": "converts to a color"
    },
    {
      "name": "rgba",
      "example": "rgba(@r, @g, @b, @a);",
      "description": "converts to a color"
    },
    {
      "name": "argb",
      "example": "argb(@color);",
      "description": "creates a #AARRGGBB"
    },
    {
      "name": "hsl",
      "example": "hsl(@hue, @saturation, @lightness);",
      "description": "creates a color"
    },
    {
      "name": "hsla",
      "example": "hsla(@hue, @saturation, @lightness, @alpha);",
      "description": "creates a color"
    },
    {
      "name": "hsv",
      "example": "hsv(@hue, @saturation, @value);",
      "description": "creates a color"
    },
    {
      "name": "hsva",
      "example": "hsva(@hue, @saturation, @value, @alpha);",
      "description": "creates a color"
    }
  ],
  "color-channel": [
    {
      "name": "hue",
      "example": "hue(@color);",
      "description": "returns the `hue` channel of `@color` in the HSL space"
    },
    {
      "name": "saturation",
      "example": "saturation(@color);",
      "description": "returns the `saturation` channel of `@color` in the HSL space"
    },
    {
      "name": "lightness",
      "example": "lightness(@color);",
      "description": "returns the `lightness` channel of `@color` in the HSL space"
    },
    {
      "name": "hsvhue",
      "example": "hsvhue(@color);",
      "description": "returns the `hue` channel of `@color` in the HSV space",
      "version": "1.4.0"
    },
    {
      "name": "hsvsaturation",
      "example": "hsvsaturation(@color);",
      "description": "returns the `saturation` channel of `@color` in the HSV space",
      "version": "1.4.0"
    },
    {
      "name": "hsvvalue",
      "example": "hsvvalue(@color);",
      "description": "returns the `value` channel of `@color` in the HSV space",
      "version": "1.4.0"
    },
    {
      "name": "red",
      "example": "red(@color);",
      "description": "returns the `red` channel of `@color`"
    },
    {
      "name": "green",
      "example": "green(@color);",
      "description": "returns the `green` channel of `@color`"
    },
    {
      "name": "blue",
      "example": "blue(@color);",
      "description": "returns the `blue` channel of `@color`"
    },
    {
      "name": "alpha",
      "example": "alpha(@color);",
      "description": "returns the `alpha` channel of `@color`"
    },
    {
      "name": "luma",
      "example": "luma(@color);",
      "description": "returns the `luma` value (perceptual brightness) of `@color`"
    }
  ],
  "color-operations": [
    {
      "name": "saturate",
      "example": "saturate(@color, 10%);",
      "description": "return `@color` 10% points _more_ saturated"
    },
    {
      "name": "desaturate",
      "example": "desaturate(@color, 10%);",
      "description": "return `@color` 10% points _less_ saturated"
    },
    {
      "name": "lighten",
      "example": "lighten(@color, 10%);",
      "description": "return `@color` 10% points _lighter_"
    },
    {
      "name": "darken",
      "example": "darken(@color, 10%);",
      "description": "return `@color` 10% points _darker_"
    },
    {
      "name": "fadein",
      "example": "fadein(@color, 10%);",
      "description": "return `@color` 10% points _less_ transparent"
    },
    {
      "name": "fadeout",
      "example": "fadeout(@color, 10%);",
      "description": "return `@color` 10% points _more_ transparent"
    },
    {
      "name": "fade",
      "example": "fade(@color, 50%);",
      "description": "return `@color` with 50% transparency"
    },
    {
      "name": "spin",
      "example": "spin(@color, 10);",
      "description": "return `@color` with a 10 degree larger in hue"
    },
    {
      "name": "mix",
      "example": "mix(@color1, @color2, [@weight: 50%]);",
      "description": "return a mix of `@color1` and `@color2`"
    },
    {
      "name": "greyscale",
      "example": "greyscale(@color);",
      "description": "returns a grey, 100% desaturated color"
    },
    {
      "name": "contrast",
      "example": "contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);",
      "description": "return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes"
    }
  ],
  "color-blending": [
    {
      "name": "multiply",
      "example": "multiply(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "screen",
      "example": "screen(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "overlay",
      "example": "overlay(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "softlight",
      "example": "softlight(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "hardlight",
      "example": "hardlight(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "difference",
      "example": "difference(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "exclusion",
      "example": "exclusion(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "average",
      "example": "average(@color1, @color2);",
      "description": "description..."
    },
    {
      "name": "negation",
      "example": "negation(@color1, @color2);",
      "description": "description..."
    }
  ]
}